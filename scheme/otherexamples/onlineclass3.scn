#lang scheme
(define x 5)
(define y -3)
(define z 12)

(+ x y z)
(* (+ x 4) (* y z) (- x y))

(define square
  (lambda (x)
    (* x x)))
(square 10)

(newline)
"Lists"
(list 1 2 3 4)
(list + 'Hello "World" (* x 4))
(list + 'Hello "World" '(* x 4))
(define lst '(1 2 3 4 5))
lst
(car lst)
(cdr lst)
(cons 0 lst)
(cons '(1 2 3) '(4 5 6))
(append '(1 2 3) '(4 5 6))

(newline)
"Pairs"
(cons 1 2)
(define pr '(a . b))
pr
(car pr)
(cdr pr)
(cons 1 '())

(newline)
"Defining list procedures"
(define add-list
  (lambda (lst)
    (if (null? lst)
        0
        (+ (car lst) (add-list (cdr lst))))))

(define half-each-element
  (lambda (lst)
    (if (null? lst)
        '()
        (cons (/ (car lst) 2) (half-each-element (cdr lst))))))

(add-list lst)
(half-each-element lst)

(define element
  (lambda (lst n)
    (if (= n 1)
        (car lst)
        (element (cdr lst) (- n 1)))))
(element lst 1)
(element lst 3)
(element '(a b c d e f g) 5)

(newline)
"Higher-order functions"
(apply + lst)
(map (lambda (x) (+ x 3)) lst)
(filter number? '(1 a 2 b "hello" + 4))
(map number? '(1 a 2 b "hello" + 4))

(newline)
"Let stuctures"
(let
    ((a 10)
     (b 11))
  (+ a b))

(define double-pi-list
  (lambda (lst)
    (let
        ((double (lambda (x) (* x 2)))
         (pi 3.14159))
      (if (null? lst)
          '()
          (cons (* pi (double (car lst))) (double-pi-list (cdr lst)))))))
(double-pi-list lst)
(double-pi-list '(-4 17 8 72 99))

"Let -> lambda"
(let
    ((a 20)
     (b 10))
  (+ a b))
((lambda (a b ) (+ a b)) 20 10)

"Lambda -> let"
((lambda (m n) (- m n)) 35 17)
(let
    ((m 35)
     (n 17))
  (- m n))



         
  


        
        




